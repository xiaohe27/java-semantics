`'ListWrap`(`'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.Thread","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(`'class_`(#token("java.lang.Runnable","Id")))))),`'ClassBody`(`'ListWrap`(`'FieldDec`(`'ListWrap`(`'Static`(.::KList)), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("nextTid","Id")))), `'StaticInit`(`'Block`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'Field`(`'class_`(#token("java.lang.Thread","Id")), #token("nextTid","Id")), `'_::_`(#token("1","#Int"), `'Int`(.::KList))))))), `'FieldDec`(`'ListWrap`(.::KList), `'class_`(#token("java.lang.Runnable","Id")), `'ListWrap`(`'VarDec`(#token("runnable","Id")))), `'FieldDec`(`'ListWrap`(.::KList), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("tid","Id")))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("join","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Synchronized`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))),#token("joinImpl","Id"))), `'ListWrap`(`'cast`(`'Int`(.::KList), `'cast`(`'Int`(.::KList), `'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("tid","Id")))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("joinImpl","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), #token("tid","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("run","Id"), `'.List{"'FormalParamList"}`(.::KList),`'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.Thread","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Runnable","Id")),#token("runnable","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.Runnable","Id")), `'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("runnable","Id")), `'cast`(`'class_`(#token("java.lang.Runnable","Id")), `'ExprName`(#token("runnable","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("tid","Id")), `'cast`(`'Int`(.::KList), `'PostIncr`(`'Field`(`'class_`(#token("java.lang.Thread","Id")), #token("nextTid","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("interrupt","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))),#token("interruptImpl","Id"))), `'ListWrap`(`'cast`(`'Int`(.::KList), `'cast`(`'Int`(.::KList), `'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("tid","Id"))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("interruptImpl","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), #token("tid","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("startImpl","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), #token("tid","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.Thread","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.Runnable","Id")), `'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("runnable","Id")), `'cast`(`'class_`(#token("java.lang.Runnable","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("start","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id")))),#token("startImpl","Id"))), `'ListWrap`(`'cast`(`'Int`(.::KList), `'cast`(`'Int`(.::KList), `'Field`(`'cast`(`'class_`(#token("java.lang.Thread","Id")), `'cast`(`'class_`(#token("java.lang.Thread","Id")), `'QThis`(`'class_`(#token("java.lang.Thread","Id"))))), #token("tid","Id")))))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ArrayStoreException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArrayStoreException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArrayStoreException","Id")), `'QThis`(`'class_`(#token("java.lang.ArrayStoreException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArrayStoreException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArrayStoreException","Id")), `'QThis`(`'class_`(#token("java.lang.ArrayStoreException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.Class","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'FieldDec`(`'ListWrap`(.::KList), `'class_`(#token("java.lang.String","Id")), `'ListWrap`(`'VarDec`(#token("name","Id")))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("getName","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'Return`(`'Some`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Field`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'cast`(`'class_`(#token("java.lang.Class","Id")), `'QThis`(`'class_`(#token("java.lang.Class","Id"))))), #token("name","Id")))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.Class","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'QThis`(`'class_`(#token("java.lang.Class","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.Class","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("name","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'QThis`(`'class_`(#token("java.lang.Class","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'cast`(`'class_`(#token("java.lang.Class","Id")), `'QThis`(`'class_`(#token("java.lang.Class","Id"))))), #token("name","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("name","Id"))))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.Exception","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'FieldDec`(`'ListWrap`(.::KList), `'class_`(#token("java.lang.String","Id")), `'ListWrap`(`'VarDec`(#token("detailMessage","Id")))), `'FieldDec`(`'ListWrap`(.::KList), `'class_`(#token("java.lang.Exception","Id")), `'ListWrap`(`'VarDec`(#token("cause","Id")))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.Exception","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("message","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("detailMessage","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.Exception","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Exception","Id")),#token("cause","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("detailMessage","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Cond`(`'cast`(`'Boolean`(.::KList), `'Eq`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'ExprName`(#token("cause","Id"))), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList)))), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList)), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'ExprName`(#token("cause","Id"))), #token("toString","Id"))), `'ListWrap`(.::KList)))))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("cause","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'ExprName`(#token("cause","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("toString","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), `'ListWrap`(`'VarDec`(#token("s","Id")))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Assign`(`'ExprName`(#token("s","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))), #token("getClass","Id"))), `'ListWrap`(.::KList))), #token("getName","Id"))), `'ListWrap`(.::KList))))))), `'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), `'ListWrap`(`'VarDec`(#token("message","Id")))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Assign`(`'ExprName`(#token("message","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))),#token("getMessage","Id"))), `'ListWrap`(.::KList))))))), `'Return`(`'Some`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Cond`(`'cast`(`'Boolean`(.::KList), `'NotEq`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id"))), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList)))), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id"))), `'_::_`(#token("\": \"","#String"), `'class_`(#token("java.lang.String","Id"))))), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id"))))), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("getMessage","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'Return`(`'Some`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("detailMessage","Id")))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.Exception","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("message","Id")), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Exception","Id")),#token("cause","Id")), `'.List{"'FormalParamList"}`(.::KList))), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("detailMessage","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))))), `'ExprStm`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'Assign`(`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id"))))),#token("cause","Id")), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'ExprName`(#token("cause","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.Exception","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'QThis`(`'class_`(#token("java.lang.Exception","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.AssertionError","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.AssertionError","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.AssertionError","Id")), `'QThis`(`'class_`(#token("java.lang.AssertionError","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.AssertionError","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("message","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.AssertionError","Id")), `'QThis`(`'class_`(#token("java.lang.AssertionError","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.InterruptedException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.InterruptedException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.InterruptedException","Id")), `'QThis`(`'class_`(#token("java.lang.InterruptedException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.InterruptedException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.InterruptedException","Id")), `'QThis`(`'class_`(#token("java.lang.InterruptedException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.NegativeArraySizeException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.NegativeArraySizeException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.NegativeArraySizeException","Id")), `'QThis`(`'class_`(#token("java.lang.NegativeArraySizeException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.NegativeArraySizeException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.NegativeArraySizeException","Id")), `'QThis`(`'class_`(#token("java.lang.NegativeArraySizeException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.IllegalMonitorStateException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.IllegalMonitorStateException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.IllegalMonitorStateException","Id")), `'QThis`(`'class_`(#token("java.lang.IllegalMonitorStateException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.IllegalMonitorStateException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.IllegalMonitorStateException","Id")), `'QThis`(`'class_`(#token("java.lang.IllegalMonitorStateException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.NullPointerException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.NullPointerException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.NullPointerException","Id")), `'QThis`(`'class_`(#token("java.lang.NullPointerException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.NullPointerException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.NullPointerException","Id")), `'QThis`(`'class_`(#token("java.lang.NullPointerException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'InterfaceDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.Runnable","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'noClass`(.::KList))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("run","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList)))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ArrayImpl","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("clone","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.ArrayImpl","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArrayImpl","Id")), `'QThis`(`'class_`(#token("java.lang.ArrayImpl","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList)))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ExceptionInInitializerError","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ExceptionInInitializerError","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("message","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")), `'QThis`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ExceptionInInitializerError","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")), `'QThis`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ExceptionInInitializerError","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")),#token("cause","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList))), `'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'cast`(`'class_`(#token("java.lang.Object","Id")), `'ExprName`(#token("cause","Id"))))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")), `'QThis`(`'class_`(#token("java.lang.ExceptionInInitializerError","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ArrayIndexOutOfBoundsException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArrayIndexOutOfBoundsException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)),`'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArrayIndexOutOfBoundsException","Id")), `'QThis`(`'class_`(#token("java.lang.ArrayIndexOutOfBoundsException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArrayIndexOutOfBoundsException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArrayIndexOutOfBoundsException","Id")), `'QThis`(`'class_`(#token("java.lang.ArrayIndexOutOfBoundsException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ArithmeticException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArithmeticException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArithmeticException","Id")), `'QThis`(`'class_`(#token("java.lang.ArithmeticException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ArithmeticException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ArithmeticException","Id")), `'QThis`(`'class_`(#token("java.lang.ArithmeticException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.RuntimeException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Exception","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.RuntimeException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("message","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'QThis`(`'class_`(#token("java.lang.RuntimeException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.RuntimeException","Id"),`'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("message","Id")), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.RuntimeException","Id")),#token("cause","Id")), `'.List{"'FormalParamList"}`(.::KList))), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("message","Id")))), `'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'ExprName`(#token("cause","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'QThis`(`'class_`(#token("java.lang.RuntimeException","Id")))), #token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.RuntimeException","Id"),`'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'QThis`(`'class_`(#token("java.lang.RuntimeException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.lang.RuntimeException","Id"),`'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.RuntimeException","Id")), #token("cause","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'ExprName`(#token("cause","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'QThis`(`'class_`(#token("java.lang.RuntimeException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("getMessage","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'Return`(`'Some`(`'cast`(`'class_`(#token("java.lang.String","Id")),`'Field`(`'cast`(`'class_`(#token("java.lang.Exception","Id")), `'cast`(`'class_`(#token("java.lang.RuntimeException","Id")), `'QThis`(`'class_`(#token("java.lang.RuntimeException","Id"))))), #token("detailMessage","Id"))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.ClassCastException","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.RuntimeException","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ClassCastException","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'ExprName`(#token("s","Id")))))), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ClassCastException","Id")), `'QThis`(`'class_`(#token("java.lang.ClassCastException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.ClassCastException","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.ClassCastException","Id")), `'QThis`(`'class_`(#token("java.lang.ClassCastException","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.util.Scanner","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Int`(.::KList), #token("nextInt","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.util.Scanner","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("o","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'QThis`(`'class_`(#token("java.util.Scanner","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$java.util.Scanner","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'QThis`(`'class_`(#token("java.util.Scanner","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("nextLine","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList))))),`'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.System","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'FieldDec`(`'ListWrap`(`'Static`(.::KList)),`'class_`(#token("java.lang.Object","Id")), `'ListWrap`(`'VarDec`(#token("in","Id")))), `'FieldDec`(`'ListWrap`(`'Static`(.::KList)), `'class_`(#token("java.io.PrintWriter","Id")), `'ListWrap`(`'VarDec`(#token("out","Id")))), `'StaticInit`(`'Block`(`'ExprStm`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'Assign`(`'Field`(`'class_`(#token("java.lang.System","Id")),#token("in","Id")), `'cast`(`'class_`(#token("java.lang.Object","Id")), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList)))))), `'ExprStm`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'Assign`(`'Field`(`'class_`(#token("java.lang.System","Id")), #token("out","Id")), `'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'NewInstance`(`'None`(.::KList), `'class_`(#token("java.io.PrintWriter","Id")), `'ListWrap`(.::KList), `'None`(.::KList)))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.System","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.System","Id")), `'QThis`(`'class_`(#token("java.lang.System","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList)))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.Object","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'noClass`(.::KList))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.Object","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'Block`(`'ListWrap`(.::KList)))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.Class","Id")), #token("getClass","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Int`(.::KList), #token("hashCode","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Protected`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("clone","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("notify","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Boolean`(.::KList), #token("equals","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("obj","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'Return`(`'Some`(`'cast`(`'Boolean`(.::KList), `'Eq`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'QThis`(`'class_`(#token("java.lang.Object","Id")))), `'cast`(`'class_`(#token("java.lang.Object","Id")), `'ExprName`(#token("obj","Id")))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("toString","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'Return`(`'Some`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Class","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'QThis`(`'class_`(#token("java.lang.Object","Id")))),#token("getClass","Id"))), `'ListWrap`(.::KList))),#token("getName","Id"))), `'ListWrap`(.::KList))), `'_::_`(#token("\"@\"","#String"), `'class_`(#token("java.lang.String","Id"))))), `'cast`(`'Int`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'QThis`(`'class_`(#token("java.lang.Object","Id")))), #token("hashCode","Id"))), `'ListWrap`(.::KList)))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("notifyAll","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("wait","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.lang.String","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)),`'None`(.::KList), `'Int`(.::KList), #token("compareTo","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")),#token("another","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Char`(.::KList), #token("charAt","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList),#token("index","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Boolean`(.::KList), #token("equals","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("anObject","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")),#token("toString","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Int`(.::KList), #token("length","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.lang.String","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'QThis`(`'class_`(#token("java.lang.String","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'staticCT`(.::KList)), `'None`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("valueOf","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), #token("i","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token("java.io.PrintWriter","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("println","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")), #token("o","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))), #token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'ExprName`(#token("o","Id"))), `'_::_`(#token("\"\\n\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("println","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Long`(.::KList),#token("l","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))),#token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'Long`(.::KList), `'ExprName`(#token("l","Id"))), `'_::_`(#token("\"\\n\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("println","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))),#token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'_::_`(#token("\"\\n\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("println","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Boolean`(.::KList),#token("b","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))),#token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'Boolean`(.::KList), `'ExprName`(#token("b","Id"))), `'_::_`(#token("\"\\n\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("println","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Double`(.::KList),#token("d","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))),#token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'cast`(`'Double`(.::KList), `'ExprName`(#token("d","Id"))), `'_::_`(#token("\"\\n\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("print","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.String","Id")), #token("s","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("print","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Boolean`(.::KList), #token("b","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("print","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Long`(.::KList), #token("l","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("print","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.lang.Object","Id")),#token("o","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'cast`(`'Boolean`(.::KList), `'Eq`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'ExprName`(#token("o","Id"))), `'_::_`(`'Null`(.::KList), `'nullType`(.::KList)))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))), #token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'_::_`(#token("\"null\"","#String"), `'class_`(#token("java.lang.String","Id")))))))))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))), #token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'ExprName`(#token("o","Id"))), #token("toString","Id"))),`'ListWrap`(.::KList)))))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("print","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'Double`(.::KList),#token("d","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'NoMethodBody`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("$cons$java.io.PrintWriter","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'QThis`(`'class_`(#token("java.io.PrintWriter","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList)))))), `'ClassDec`(`'ClassDecHead`(`'Public`(.::KList), `'class_`(#token(".max3","Id")), `'None`(.::KList), `'Some`(`'SuperDec`(`'class_`(#token("java.lang.Object","Id")))), `'Some`(`'ImplementsDec`(`'ListWrap`(.::KList)))), `'ClassBody`(`'ListWrap`(`'StaticInit`(`'Block`(.::KList)), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'staticCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList),#token("main","Id"), `'FormalParamList`(`'Param`(`'.List{"'AnnoVarModList"}`(.::KList), `'arrayOf_`(`'class_`(#token("java.lang.String","Id"))), #token("args","Id")), `'.List{"'FormalParamList"}`(.::KList)), `'None`(.::KList)), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'Field`(`'class_`(#token("java.lang.System","Id")), #token("out","Id"))),#token("print","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.String","Id")), `'_::_`(#token("\"Insert 3 numbers: \"","#String"), `'class_`(#token("java.lang.String","Id")))))))), `'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'class_`(#token("java.util.Scanner","Id")), `'ListWrap`(`'VarDec`(#token("scanner","Id")))), `'ExprStm`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'Assign`(`'ExprName`(#token("scanner","Id")), `'cast`(`'class_`(#token("java.util.Scanner","Id")), `'NewInstance`(`'None`(.::KList), `'class_`(#token("java.util.Scanner","Id")), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'cast`(`'class_`(#token("java.lang.Object","Id")), `'Field`(`'class_`(#token("java.lang.System","Id")),#token("in","Id"))))), `'None`(.::KList))))))), `'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("a","Id")))), `'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("a","Id")), `'cast`(`'Int`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'ExprName`(#token("scanner","Id"))), #token("nextInt","Id"))), `'ListWrap`(.::KList))))))), `'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("b","Id")))), `'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("b","Id")), `'cast`(`'Int`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'ExprName`(#token("scanner","Id"))), #token("nextInt","Id"))), `'ListWrap`(.::KList))))))), `'ListWrap`(`'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("c","Id")))), `'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("c","Id")), `'cast`(`'Int`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.util.Scanner","Id")), `'ExprName`(#token("scanner","Id"))), #token("nextInt","Id"))), `'ListWrap`(.::KList))))))), `'LocalVarDec`(`'.List{"'AnnoVarModList"}`(.::KList), `'Int`(.::KList), `'ListWrap`(`'VarDec`(#token("max","Id")))), `'If`(`'cast`(`'Boolean`(.::KList), `'Gt`(`'cast`(`'Int`(.::KList), `'ExprName`(#token("a","Id"))), `'cast`(`'Int`(.::KList), `'ExprName`(#token("b","Id"))))), `'Block`(`'ListWrap`(`'If`(`'cast`(`'Boolean`(.::KList), `'Gt`(`'cast`(`'Int`(.::KList), `'ExprName`(#token("a","Id"))), `'cast`(`'Int`(.::KList), `'ExprName`(#token("c","Id"))))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("max","Id")), `'cast`(`'Int`(.::KList), `'ExprName`(#token("a","Id")))))))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("max","Id")), `'cast`(`'Int`(.::KList), `'ExprName`(#token("c","Id"))))))))))), `'Block`(`'ListWrap`(`'If`(`'cast`(`'Boolean`(.::KList), `'Gt`(`'cast`(`'Int`(.::KList), `'ExprName`(#token("b","Id"))), `'cast`(`'Int`(.::KList), `'ExprName`(#token("c","Id"))))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("max","Id")), `'cast`(`'Int`(.::KList), `'ExprName`(#token("b","Id")))))))), `'Block`(`'ListWrap`(`'ExprStm`(`'cast`(`'Int`(.::KList), `'Assign`(`'ExprName`(#token("max","Id")), `'cast`(`'Int`(.::KList), `'ExprName`(#token("c","Id")))))))))))), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'Field`(`'class_`(#token("java.lang.System","Id")), #token("out","Id"))),#token("println","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'cast`(`'class_`(#token("java.lang.String","Id")), `'Plus`(`'_::_`(#token("\"max = \"","#String"), `'class_`(#token("java.lang.String","Id"))), `'cast`(`'Int`(.::KList), `'ExprName`(#token("max","Id")))))))))), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token("java.io.PrintWriter","Id")), `'Field`(`'class_`(#token("java.lang.System","Id")), #token("out","Id"))), #token("println","Id"))), `'ListWrap`(`'cast`(`'class_`(#token("java.lang.Object","Id")), `'_::_`(#token("\"Done!\"","#String"), `'class_`(#token("java.lang.String","Id"))))))))))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Private`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$instance_init","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'Block`(`'ListWrap`(.::KList))), `'MethodDec`(`'MethodDecHead`(`'ListWrap`(`'Public`(.::KList), `'instanceCT`(.::KList)), `'None`(.::KList), `'Void`(.::KList), #token("$cons$.max3","Id"), `'.List{"'FormalParamList"}`(.::KList), `'None`(.::KList)), `'ListWrap`(`'QSuperConstrInv`(`'noValue`(.::KList), `'None`(.::KList), `'ListWrap`(.::KList)), `'Block`(`'ListWrap`(`'If`(`'_::_`(#token("true","#Bool"), `'Boolean`(.::KList)), `'ExprStm`(`'cast`(`'Void`(.::KList), `'Invoke`(`'Method`(`'MethodName`(`'cast`(`'class_`(#token(".max3","Id")), `'QThis`(`'class_`(#token(".max3","Id")))),#token("$instance_init","Id"))), `'ListWrap`(.::KList)))))))))))))