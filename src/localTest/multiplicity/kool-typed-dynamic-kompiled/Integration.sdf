module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1360Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1473Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1345Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool1228Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1335Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1468Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1460Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1374Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1399Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map176Syn")}
} > {
    Map Map -> Map {left, cons("Map1244Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1477Syn")}
    K "=/=K" K -> Bool {left, cons("Bool192Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1477Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool136Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1304Syn")}
    K "=/=K" K -> Bool {left, cons("Bool192Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1460Syn")}
    "notBool" Bool -> Bool {cons("Bool1360Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1345Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1335Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1468Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool1228Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1473Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool136Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1304Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1258Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int175Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int170Syn")}
    Int "/Int" Int -> Int {left, cons("Int1225Syn")}
    Int "%Int" Int -> Int {left, cons("Int1322Syn")}
    Int "divInt" Int -> Int {left, cons("Int1426Syn")}
    Int "modInt" Int -> Int {left, cons("Int172Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1342Syn")}
    Int "-Int" Int -> Int {left, cons("Int1282Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int1230Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1250Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1255Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int195Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int193Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1339Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float120Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1233Syn")}
    Float "/Float" Float -> Float {left, cons("Float167Syn")}
    Float "%Float" Float -> Float {left, cons("Float1422Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1486Syn")}
    Float "-Float" Float -> Float {left, cons("Float1340Syn")}
}

context-free priorities
{
    Id -> Type {}
    Type "[" "]" -> Type {cons("Type1299Syn")}
} > {
    Types "->" Type -> Type {cons("Type1224Syn")}
}

context-free priorities
{
    Int -> Exp {}
    Bool -> Exp {}
    String -> Exp {}
    Id -> Exp {}
    "++" Exp -> Exp {cons("Exp169Syn")}
    Exp "instanceOf" Id -> Exp {cons("Exp1453Syn")}
    "(" InsertDzId ")" Exp -> Exp {cons("Exp1309Syn")}
    Exp "." Id -> Exp {cons("Exp1306Syn")}
} > {
    Exp "[" InsertDzExps "]" -> Exp {cons("Exp1277Syn")}
} > {
    Exp "(" InsertDzExps ")" -> Exp {cons("Exp1334Syn")}
    "-" Exp -> Exp {cons("Exp1389Syn")}
} > { left:
    Exp "*" Exp -> Exp {left, cons("Exp1393Syn")}
    Exp "/" Exp -> Exp {left, cons("Exp1429Syn")}
    Exp "%" Exp -> Exp {left, cons("Exp1268Syn")}
} > { left:
    Exp "+" Exp -> Exp {left, cons("Exp1373Syn")}
    Exp "-" Exp -> Exp {left, cons("Exp1349Syn")}
} > { non-assoc:
    Exp "<" Exp -> Exp {non-assoc, cons("Exp149Syn")}
    Exp "<=" Exp -> Exp {non-assoc, cons("Exp1386Syn")}
    Exp ">" Exp -> Exp {non-assoc, cons("Exp1276Syn")}
    Exp ">=" Exp -> Exp {non-assoc, cons("Exp145Syn")}
    Exp "==" Exp -> Exp {non-assoc, cons("Exp1425Syn")}
    Exp "!=" Exp -> Exp {non-assoc, cons("Exp1366Syn")}
} > {
    ExclamationMarkDz Exp -> Exp {cons("Exp1445Syn")}
} > { left:
    Exp "&&" Exp -> Exp {left, cons("Exp1367Syn")}
    Exp "||" Exp -> Exp {left, cons("Exp1294Syn")}
} > {
    "spawn" Block -> Exp {cons("Exp1456Syn")}
} > {
    Exp "=" Exp -> Exp {right, cons("Exp137Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Val -> K
    Types -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Params -> K
    Ddecl -> K
    Float -> K
    Type -> K
    IOError -> K
    Exps -> K
    Param -> K
    Block -> K
    Vals -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
} .> {
    DzFloat -> Float
    Vals -> Exps
    Bool -> Exp
    DzInt -> Int
    Block -> Stmt
    String -> Val
    DzString -> String
    Bool -> Val
    Int -> Exp
    Exp -> Exps
    Int -> Val
    Type -> Types
    String -> Exp
    Ddecl -> Stmt
    Param -> Params
    Id -> Exp
    Val -> Vals
    DzBool -> Bool
    Stmt -> Stmts
    Val -> Exp
    Id -> Type
} .> {
    K -> Nat
    K -> Val
    K -> Types
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Params
    K -> Ddecl
    K -> Float
    K -> Type
    K -> IOError
    K -> Exps
    K -> Param
    K -> Block
    K -> Vals
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Val -> K
    Types -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Params -> K
    Ddecl -> K
    Float -> K
    Type -> K
    IOError -> K
    Exps -> K
    Param -> K
    Block -> K
    Vals -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
} .> {
    K -> Nat
    K -> Val
    K -> Types
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Params
    K -> Ddecl
    K -> Float
    K -> Type
    K -> IOError
    K -> Exps
    K -> Param
    K -> Block
    K -> Vals
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Val
    K -> Types
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Params
    K -> Ddecl
    K -> Float
    K -> Type
    K -> IOError
    K -> Exps
    K -> Param
    K -> Block
    K -> Vals
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
} .> {
    Nat -> K
    Val -> K
    Types -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Params -> K
    Ddecl -> K
    Float -> K
    Type -> K
    IOError -> K
    Exps -> K
    Param -> K
    Block -> K
    Vals -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "return" InsertDzExp ";" -> Stmt {cons("Stmt12Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem13Syn")}
    K "inKList" KList -> Bool {cons("Bool14Syn")}
    "objMap2String" "(" InsertDzMap ")" -> String {cons("String15Syn")}
    Exp ";" -> Stmt {cons("Stmt16Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int17Syn")}
    "objectClosure" "(" InsertDzBag ")" -> Val {cons("Val18Syn")}
    "#EISDIR" -> IOError {cons("IOError19Syn")}
    Type "," Types -> Types {cons("Types1ListSyn")}
    ".Types" -> Types {cons("Types1Empty")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map122Syn")}
    "try" InsertDzBlock "catch" "(" InsertDzParam ")" Block -> Stmt {cons("Stmt123Syn")}
    "(" InsertDzParam "," InsertDzStmt "," InsertDzK "," InsertDzMap "," InsertDzBag ")" -> KItem {cons("KItem124Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map125Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float126Syn")}
    Map "=Map" Map -> Bool {cons("Bool127Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float128Syn")}
    Set "=Set" Set -> Bool {cons("Bool129Syn")}
    String "<String" String -> Bool {cons("Bool130Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List132Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float133Syn")}
    Type InsertDzExps ";" -> Ddecl {cons("Ddecl134Syn")}
    "methMap2String" "(" InsertDzMap ")" -> String {cons("String135Syn")}
    Type "<" InsertDzVals ">" -> Type {cons("Type138Syn")}
    ".List" -> List {cons("List139Syn")}
    "true?" -> KItem {cons("KItem140Syn")}
    "#EBADF" -> IOError {cons("IOError142Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream143Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String144Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool146Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool147Syn")}
    "#stderr" -> Int {cons("Int148Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool150Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int152Syn")}
    Map "-Map" Map -> Map {cons("Map153Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float154Syn")}
    "nothing" "(" InsertDzType ")" -> Val {cons("Val155Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String156Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String157Syn")}
    String -> Val {}
    Set "-Set" Set -> Set {cons("Set158Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool159Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel160Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream162Syn")}
    "read" "(" ")" -> Exp {cons("Exp163Syn")}
    "profile" -> KItem {cons("KItem164Syn")}
    String "=/=String" String -> Bool {left, cons("Bool165Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id166Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel168Syn")}
    Val "," Vals -> Vals {cons("Vals1ListSyn")}
    ".Vals" -> Vals {cons("Vals1Empty")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int173Syn")}
    "sizeOf" "(" InsertDzExp ")" -> Exp {cons("Exp174Syn")}
    K "|->" K -> Map {cons("Map176Syn")}
    "undefined" "(" InsertDzType ")" -> KItem {cons("KItem177Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int178Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int179Syn")}
    "Object" -> Id {cons("Id180Syn")}
    "bool" -> Type {cons("Type182Syn")}
    "(" InsertDzMap "," InsertDzK "," InsertDzBag ")" -> KItem {cons("KItem183Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map184Syn")}
    Int "=Int" Int -> Bool {cons("Bool185Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List186Syn")}
    "while" "(" InsertDzExp ")" Block -> Stmt {cons("Stmt187Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float188Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int189Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float190Syn")}
    Exp "," Exps -> Exps {cons("Exps1ListSyn")}
    ".Exps" -> Exps {cons("Exps1Empty")}
    "return" ";" -> Stmt {cons("Stmt194Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList196Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String197Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem198Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float199Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList1200Syn")}
    Val -> Exp {}
    Int "<Int" Int -> Bool {left, cons("Bool1202Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool1203Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int1204Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int1205Syn")}
    "for" "(" InsertDzStmts InsertDzExp ";" InsertDzExp ")" Block -> Stmt {cons("Stmt1206Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1207Syn")}
    "storeObj" -> KItem {cons("KItem1208Syn")}
    "setCrntClass" "(" InsertDzId ")" -> KItem {cons("KItem1209Syn")}
    "methName" "(" InsertDzString ")" -> KItem {cons("KItem1220Syn")}
    "join" InsertDzExp ";" -> Stmt {cons("Stmt1222Syn")}
    "(" InsertDzId "," InsertDzBag ")" -> KItem {cons("KItem1223Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1226Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K1227Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1229Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1232Syn")}
    Type Id -> Param {cons("Param1234Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1235Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1236Syn")}
    Stmts Stmts -> Stmts {right, cons("Stmts1237Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1238Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1239Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1240Syn")}
    KList "=KList" KList -> Bool {cons("Bool1242Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1243Syn")}
    Map Map -> Map {left, cons("Map1244Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1245Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1246Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1247Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1248Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1249Syn")}
    "class" InsertDzId "extends" InsertDzId Block -> Ddecl {cons("Ddecl1252Syn")}
    "#noIO" -> Stream {cons("Stream1253Syn")}
    "lookup" "(" InsertDzInt ")" -> KItem {cons("KItem1254Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1256Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1257Syn")}
    "#EACCES" -> IOError {cons("IOError1259Syn")}
    List "=List" List -> Bool {cons("Bool1260Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1262Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1263Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1264Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1265Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1266Syn")}
    Set Set -> Set {left, cons("Set1269Syn")}
    "super" -> Exp {cons("Exp1270Syn")}
    Id ".>" Id -> Id {cons("Id1272Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1273Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1274Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1275Syn")}
    Stmt -> Stmts {}
    K "#inKList" KList -> Bool {cons("Bool1278Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1279Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1280Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1283Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1284Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1285Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1286Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1287Syn")}
    Int -> Val {}
    "choice" "(" InsertDzSet ")" -> K {cons("K1288Syn")}
    "class" InsertDzId Block -> Ddecl {cons("Ddecl1289Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1290Syn")}
    "subtype" "(" InsertDzTypes "," InsertDzTypes ")" -> Exp {cons("Exp1292Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1293Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1295Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1296Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1297Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1298Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1302Syn")}
    "$1" -> Id {cons("Id1303Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1305Syn")}
    "initMethodMap" "(" InsertDzId "," InsertDzStmts ")" -> Map {cons("Map1307Syn")}
    DzFloat -> Float {}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1320Syn")}
    "throw" InsertDzExp ";" -> Stmt {cons("Stmt1323Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1324Syn")}
    Ddecl -> Stmt {}
    "#ELOOP" -> IOError {cons("IOError1325Syn")}
    "env" "(" InsertDzMap ")" -> KItem {cons("KItem1326Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1327Syn")}
    "lookupMember" "(" InsertDzBag "," InsertDzId ")" -> KItem {cons("KItem1328Syn")}
    Int "..." InsertDzInt "|->" K -> Map {cons("Map1329Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1330Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1332Syn")}
    "#stdin" -> Int {cons("Int1333Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1336Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1337Syn")}
    "#configuration" -> Bag {cons("Bag1338Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1343Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1346Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1347Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1348Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1350Syn")}
    "string" -> Type {cons("Type1352Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1353Syn")}
    ".Set" -> Set {cons("Set1354Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1355Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1356Syn")}
    "acquire" InsertDzExp ";" -> Stmt {cons("Stmt1358Syn")}
    "if" "(" InsertDzExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1357Syn")}
    List List -> List {left, cons("List1359Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1362Syn")}
    Param "," Params -> Params {cons("Params1ListSyn")}
    ".Params" -> Params {cons("Params1Empty")}
    Map "<=Map" Map -> Bool {cons("Bool1363Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1364Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1365Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1368Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1369Syn")}
    String "==String" String -> Bool {left, cons("Bool1370Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1372Syn")}
    String "+String" String -> String {left, cons("String1375Syn")}
    "release" InsertDzExp ";" -> Stmt {cons("Stmt1376Syn")}
    String ">=String" String -> Bool {cons("Bool1377Syn")}
    "array" "(" InsertDzType "," InsertDzInt "," InsertDzInt ")" -> Val {cons("Val1378Syn")}
    "void" -> Type {cons("Type1379Syn")}
    K "in" Set -> Bool {cons("Bool1380Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1382Syn")}
    ".Map" -> Map {cons("Map1383Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1384Syn")}
    KList "==KList" KList -> Bool {cons("Bool1385Syn")}
    "meth" "(" InsertDzId "," InsertDzId ")" -> String {cons("String1387Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1388Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1392Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1394Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1395Syn")}
    "print" "(" InsertDzExps ")" ";" -> Stmt {cons("Stmt1396Syn")}
    "#ENOENT" -> IOError {cons("IOError1397Syn")}
    "new" InsertDzId "(" InsertDzExps ")" -> Exp {cons("Exp1398Syn")}
    "#EINVAL" -> IOError {cons("IOError1400Syn")}
    String ">String" String -> Bool {cons("Bool1402Syn")}
    "addEnvLayer" -> KItem {cons("KItem1403Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1404Syn")}
    "if" "(" InsertDzExp ")" Block -> Stmt {cons("Stmt1405Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1406Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1407Syn")}
    Bool -> Val {}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1408Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1409Syn")}
    "lvalue" "(" InsertDzK ")" -> Exp {cons("Exp1420Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1423Syn")}
    "#stdout" -> Int {cons("Int1424Syn")}
    "#noparse" -> IOError {cons("IOError1427Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1428Syn")}
    "getTypes" "(" InsertDzParams ")" -> Types {cons("Types1430Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1432Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1433Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1434Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1435Syn")}
    "{" InsertDzStmts "}" -> Block {cons("Block1436Syn")}
    Block -> Stmt {}
    KResult -> KItem {}
    "methodClosure" "(" InsertDzId "," InsertDzType "," InsertDzId "," InsertDzInt "," InsertDzParams "," InsertDzStmt ")" -> Val {cons("Val1437Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1438Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1439Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1440Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1442Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1443Syn")}
    "this" -> Exp {cons("Exp1444Syn")}
    "execute" -> KItem {cons("KItem1446Syn")}
    "create" "(" InsertDzId ")" -> KItem {cons("KItem1447Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1448Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1449Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1450Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1452Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1455Syn")}
    String "<=String" String -> Bool {cons("Bool1457Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1458Syn")}
    "#EOF" -> IOError {cons("IOError1459Syn")}
    "popx" -> KItem {cons("KItem1462Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1463Syn")}
    Type InsertDzId "(" InsertDzParams ")" Block -> Ddecl {cons("Ddecl1464Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1465Syn")}
    "mkDecls" "(" InsertDzParams "," InsertDzVals ")" -> Stmts {cons("Stmts1466Syn")}
    "unsafeCast" "(" InsertDzVal "," InsertDzType ")" -> Val {cons("Val1467Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1469Syn")}
    "countAllOccurences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1470Syn")}
    "{" "}" -> Block {cons("Block1472Syn")}
    "typeOf" "(" InsertDzK ")" -> Type {cons("Type1474Syn")}
    K "=K" K -> Bool {cons("Bool1475Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1476Syn")}
    "#ESPIPE" -> IOError {cons("IOError1478Syn")}
    "$2" -> Id {cons("Id1479Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1480Syn")}
    "int" -> Type {cons("Type1482Syn")}
    "loc" "(" InsertDzInt ")" -> Val {cons("Val1483Syn")}
    "Main" -> Id {cons("Id1484Syn")}
    K "in" List -> Bool {cons("Bool1485Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1487Syn")}
    "rendezvous" InsertDzExp ";" -> Stmt {cons("Stmt1488Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1489Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1490Syn")}
    Val    -> InsertDzVal
    Types    -> InsertDzTypes
    Set    -> InsertDzSet
    Stmts    -> InsertDzStmts
    Bag    -> InsertDzBag
    Bag    -> InsertDzBag
    K    -> InsertDzK
    String    -> InsertDzString
    KList    -> InsertDzKList
    Int    -> InsertDzInt
    Stmt    -> InsertDzStmt
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    List    -> InsertDzList
    Bag    -> InsertDzBag
    Params    -> InsertDzParams
    Bag    -> InsertDzBag
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    Type    -> InsertDzType
    Exps    -> InsertDzExps
    Param    -> InsertDzParam
    Block    -> InsertDzBlock
    Vals    -> InsertDzVals
    Id    -> InsertDzId
    Exp    -> InsertDzExp
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":Val"        -> ValDzVar            {cons("Val12Var")}
    VARID  ":Val{" TagListDz "}"        -> ValDzVar            {cons("Val12VarAttr")}
    VARID  ":Types"        -> TypesDzVar            {cons("Types12Var")}
    VARID  ":Types{" TagListDz "}"        -> TypesDzVar            {cons("Types12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":Stmts"        -> StmtsDzVar            {cons("Stmts12Var")}
    VARID  ":Stmts{" TagListDz "}"        -> StmtsDzVar            {cons("Stmts12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Stmt"        -> StmtDzVar            {cons("Stmt12Var")}
    VARID  ":Stmt{" TagListDz "}"        -> StmtDzVar            {cons("Stmt12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":Params"        -> ParamsDzVar            {cons("Params12Var")}
    VARID  ":Params{" TagListDz "}"        -> ParamsDzVar            {cons("Params12VarAttr")}
    VARID  ":Decl"        -> DdeclDzVar            {cons("Ddecl12Var")}
    VARID  ":Decl{" TagListDz "}"        -> DdeclDzVar            {cons("Ddecl12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":Type"        -> TypeDzVar            {cons("Type12Var")}
    VARID  ":Type{" TagListDz "}"        -> TypeDzVar            {cons("Type12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":Exps"        -> ExpsDzVar            {cons("Exps12Var")}
    VARID  ":Exps{" TagListDz "}"        -> ExpsDzVar            {cons("Exps12VarAttr")}
    VARID  ":Param"        -> ParamDzVar            {cons("Param12Var")}
    VARID  ":Param{" TagListDz "}"        -> ParamDzVar            {cons("Param12VarAttr")}
    VARID  ":Block"        -> BlockDzVar            {cons("Block12Var")}
    VARID  ":Block{" TagListDz "}"        -> BlockDzVar            {cons("Block12VarAttr")}
    VARID  ":Vals"        -> ValsDzVar            {cons("Vals12Var")}
    VARID  ":Vals{" TagListDz "}"        -> ValsDzVar            {cons("Vals12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":Exp"        -> ExpDzVar            {cons("Exp12Var")}
    VARID  ":Exp{" TagListDz "}"        -> ExpDzVar            {cons("Exp12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Val"    -> VariableDz    {cons("Val1Cast")}
     K CastTypeDz "Val{" TagListDz "}"    -> VariableDz    {cons("Val1CastAttr")}
     K CastTypeDz "Types"    -> VariableDz    {cons("Types1Cast")}
     K CastTypeDz "Types{" TagListDz "}"    -> VariableDz    {cons("Types1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "Stmts"    -> VariableDz    {cons("Stmts1Cast")}
     K CastTypeDz "Stmts{" TagListDz "}"    -> VariableDz    {cons("Stmts1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "Params"    -> VariableDz    {cons("Params1Cast")}
     K CastTypeDz "Params{" TagListDz "}"    -> VariableDz    {cons("Params1CastAttr")}
     K CastTypeDz "Decl"    -> VariableDz    {cons("Ddecl1Cast")}
     K CastTypeDz "Decl{" TagListDz "}"    -> VariableDz    {cons("Ddecl1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "Type"    -> VariableDz    {cons("Type1Cast")}
     K CastTypeDz "Type{" TagListDz "}"    -> VariableDz    {cons("Type1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Exps"    -> VariableDz    {cons("Exps1Cast")}
     K CastTypeDz "Exps{" TagListDz "}"    -> VariableDz    {cons("Exps1CastAttr")}
     K CastTypeDz "Param"    -> VariableDz    {cons("Param1Cast")}
     K CastTypeDz "Param{" TagListDz "}"    -> VariableDz    {cons("Param1CastAttr")}
     K CastTypeDz "Block"    -> VariableDz    {cons("Block1Cast")}
     K CastTypeDz "Block{" TagListDz "}"    -> VariableDz    {cons("Block1CastAttr")}
     K CastTypeDz "Vals"    -> VariableDz    {cons("Vals1Cast")}
     K CastTypeDz "Vals{" TagListDz "}"    -> VariableDz    {cons("Vals1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Exp"    -> VariableDz    {cons("Exp1Cast")}
     K CastTypeDz "Exp{" TagListDz "}"    -> VariableDz    {cons("Exp1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     NatDzVar   -> Nat
     ValDzVar   -> Val
     TypesDzVar   -> Types
     SetDzVar   -> Set
     StmtsDzVar   -> Stmts
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     ParamsDzVar   -> Params
     DdeclDzVar   -> Ddecl
     FloatDzVar   -> Float
     TypeDzVar   -> Type
     IOErrorDzVar   -> IOError
     ExpsDzVar   -> Exps
     ParamDzVar   -> Param
     BlockDzVar   -> Block
     ValsDzVar   -> Vals
     IdDzVar   -> Id
     ExpDzVar   -> Exp
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    ValDzVar -/- [a-zA-Z0-9]
    TypesDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    StmtsDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    StmtDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    ParamsDzVar -/- [a-zA-Z0-9]
    DdeclDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    TypeDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    ExpsDzVar -/- [a-zA-Z0-9]
    ParamDzVar -/- [a-zA-Z0-9]
    BlockDzVar -/- [a-zA-Z0-9]
    ValsDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    ExpDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isVal"      -> DzKLabel
    "isSymbolicVal"      -> DzKLabel
    "#symVal"      -> DzKLabel
    "isTypes"      -> DzKLabel
    "isSymbolicTypes"      -> DzKLabel
    "#symTypes"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isStmts"      -> DzKLabel
    "isSymbolicStmts"      -> DzKLabel
    "#symStmts"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isParams"      -> DzKLabel
    "isSymbolicParams"      -> DzKLabel
    "#symParams"      -> DzKLabel
    "isDecl"      -> DzKLabel
    "isSymbolicDecl"      -> DzKLabel
    "#symDecl"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isType"      -> DzKLabel
    "isSymbolicType"      -> DzKLabel
    "#symType"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isExps"      -> DzKLabel
    "isSymbolicExps"      -> DzKLabel
    "#symExps"      -> DzKLabel
    "isParam"      -> DzKLabel
    "isSymbolicParam"      -> DzKLabel
    "#symParam"      -> DzKLabel
    "isBlock"      -> DzKLabel
    "isSymbolicBlock"      -> DzKLabel
    "#symBlock"      -> DzKLabel
    "isVals"      -> DzKLabel
    "isSymbolicVals"      -> DzKLabel
    "#symVals"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isExp"      -> DzKLabel
    "isSymbolicExp"      -> DzKLabel
    "#symExp"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel



%% terminals reject
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "Object" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}
    "Main" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "==" -/- [I].[n].[t]
    "meth" -/- [N].[a].[m].[e]
    "*" -/- [F].[l].[o].[a].[t]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "/" -/- [I].[n].[t]
    "==" -/- [K]
    "==" -/- [B].[a].[g]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "=K" -/- [L].[a].[b].[e].[l]
    ">=" -/- [S].[t].[r].[i].[n].[g]
    ">=" -/- [I].[n].[t]
    "=" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "<=" -/- [S].[e].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "+" -/- [I].[n].[t]
    "=" -/- [K].[L].[i].[s].[t]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "%" -/- [I].[n].[t]
    "+" -/- [S].[t].[r].[i].[n].[g]
    "=" -/- [I].[n].[t]
    "." -/- [S].[e].[t]
    "==" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [I].[n].[t]
    "-" -/- [S].[e].[t]
    "meth" -/- [M].[a].[p].[\2].[S].[t].[r].[i].[n].[g]
    "=/=K" -/- [L].[i].[s].[t]
    "<" -/- [I].[n].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    ">=" -/- [F].[l].[o].[a].[t]
    "==" -/- [B].[o].[o].[l]
    "size" -/- [O].[f]
    "-" -/- [M].[a].[p]
    ">" -/- [I].[n].[t]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "==" -/- [K].[L].[i].[s].[t]
    "fresh" -/- [I].[d]
    "." -/- [M].[a].[p]
    "%" -/- [F].[l].[o].[a].[t]
    "<=" -/- [S].[t].[r].[i].[n].[g]
    "lookup" -/- [M].[e].[m].[b].[e].[r]
    "*" -/- [I].[n].[t]
    "==" -/- [F].[l].[o].[a].[t]
    ">" -/- [F].[l].[o].[a].[t]
    "." -/- [L].[i].[s].[t]
    "+" -/- [F].[l].[o].[a].[t]
    "fresh" -/- [I].[n].[t]
    "<" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [M].[a].[p]
    "==" -/- [K].[L].[a].[b].[e].[l]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    ">" -/- [S].[t].[r].[i].[n].[g]
    "<" -/- [F].[l].[o].[a].[t]
    "<=" -/- [F].[l].[o].[a].[t]
    "/" -/- [F].[l].[o].[a].[t]
    "=" -/- [M].[a].[p]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
